__b__.Collection.extend = function(obj,common){
    var _collectionUrl = (_.isString(obj.url))?obj.url:this.prototype.url;
    var _newCollection = __collectionBackboneExtend__.apply(this,arguments);
    if (obj.__autoGenerated__) return _newCollection;
    if (_.isString(_collectionUrl)) m.collections[_collectionUrl] = _newCollection;
    _newCollection.prototype.super = this.prototype.constructor.prototype;
    return _newCollection;
};

m.Collection = __b__.Collection.extend({
    one: __b__.Collection.prototype.once,
    initialize: function(models,options){
        options = options || {};
        for(var i in options) this[i] = options[i];
        if (typeof this.model === "string"){
            if (!(this.model in m.models)) throw Error("Unknown model: "+this.model);
            this.model = m.models[this.model];
        }
        this.modelName = this.model.modelName || this.model.prototype.modelName;
        this.setComparator(this.comparator);
        var _ = this;
        this.__syncName__ = "col_"+Math.floor(Math.random()*10000);
        __syncNames__[this.__syncName__] = this;
        setTimeout(function(){
            for(var i in __syncNames__){
                if ((__syncNames__[i] == _) && (i != _.__syncName__)){
                    _.keep = true;
                    delete __syncNames__[_.__syncName__];
                    _.__syncName__ = i;
                }
            }
        },0);
        if (typeof this.init == "function") this.init(arguments);

    },
    setComparator: function(c){
        if (this._comparator == c) return;
        this._comparator = c;
        if (('string' == typeof c) && (c.match(/\-\w+/))){
            var _c = c;
            _c = _c.substr(1,_c.length);
            this.comparator = function(a,b){
                if (a.get(_c) == b.get(_c)) return 0;
                if (a.get(_c) > b.get(_c)) return -1;
                else return 1;
            };
        }
        else this.comparator = c;
        this.sort();
    },
    fetch: function(args){
        var dfd = $.Deferred();
        var _this = this;
        __b__.Collection.prototype.fetch.call(this,{
            success: function(){
                if (args) if ('function' === typeof args.success) args.success.apply(_this,arguments);
                dfd.resolve(_this);
            },
            error: function(){
                if (args) if ('function' === typeof args.error) args.error.apply(_this,arguments);
                dfd.reject(arguments);
            }
        });
        return dfd.promise();
    }
});