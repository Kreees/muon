function __profileSort__(a,b){
    if (a.split(".").length > b.split(".").length) return -1;
    if (a.split(".").length < b.split(".").length) return 1;
    return 0;
}

function __templateForView__(view) {
    var selector = view.template+"_"+view.viewType;
    var profile = "muon";
    view.constructor.profiles = view.constructor.profiles.sort(__profileSort__);
    for(var i in view.constructor.profiles){
        if (m.hasProfile(view.constructor.profiles[i]))
        {
            profile = view.constructor.profiles[i];
            break;
        }
    }
    selector = "script#"+selector+"_template";
    selector += "[type='text/muon-template'][data-pack='"+view["package"]+"']";
    selector += "[data-profile='"+profile+"']";
    return $(selector)[0];
};

function __attrsParser__(attrs){
    var ret = {};
    var tempAttrs = attrs || "";
    tempAttrs = tempAttrs.split(";");
    for(var i in tempAttrs){
        var attr = tempAttrs[i].split(":");
        if (attr.length != 2) continue;
        ret[attr[0].replace(/^\s+/,"").replace(/\s+$/,"")] = attr[1].replace(/^\s+/,"").replace(/\s+$/,"");
    }
    return ret;
}

var __procProjection__ = {
    collection: function(el,collectionName,projection){
        var collAttrs = __attrsParser__(el.getAttribute("data-context-attrs"));
        if (typeof collAttrs.model === "string"){
            if (!(collAttrs.model in m.models)) throw Error("Unknown model: "+collAttrs.model);
            collAttrs.model = m.models[collAttrs.model];
        }
        if (projection instanceof m.Collection) return _.extend(projection,collAttrs);
        var Collection = m.collections[collectionName] || m.Collection;
        var dfd = $.Deferred();
        if (_.isArray(projection)){
            var coll = new Collection([],collAttrs);
            for(var i in projection){
                var el = projection[i];
                if (typeof el == "string" || typeof el == "number" || _.isObject(el)){
                    coll.add(new Collection.prototype.model(el));
                }
            }
            return coll;
        }
        if (projection === undefined){
            var coll = new Collection([],collAttrs);
            coll.fetch();
            return coll;
        }
        _.defer(dfd.reject,"Wrong projection type");
        return dfd.promise();
    },
    model: function(el,modelName,projection){
        var dataContextAttrs = el.getAttribute("data-context-attrs");
        var modelAttrs = __attrsParser__(dataContextAttrs);
        modelAttrs.__autoGenerated__ = true;
        if (projection instanceof m.Model) return _.extend(projection,modelAttrs);
        if (!(modelName in m.models) && !(modelName in this.m.models)) throw Error("Unknown model name: "+modelName);
        var Model = m.models[modelName] || this.m.models[modelName];
        if (dataContextAttrs) Model = Model.extend(modelAttrs);
        var dfd = $.Deferred();
        var dataModelId = el.getAttribute("data-model-id");
        if ((typeof projection == "string" || typeof projection == "number" || projection) && dataModelId)
            throw Error("You shouldn't use both projection variable and model Id attribute in one view simultaneously.");
        if (typeof projection == "string" || typeof projection == "number" ){
            Model.get(projection).then(dfd.resolve,dfd.reject);
            return dfd.promise();
        }
        if (typeof dataModelId == 'string'){
            Model.get(dataModelId).then(dfd.resolve,dfd.reject);
            return dfd.promise();
        }
        if (_.isObject(projection) || projection === undefined){
            return new Model();
        }
        _.defer(dfd.reject,"Wrong projection type");
        return dfd.promise();
    },
    layout: function(el,non,projection){
        return _.extend(projection,__attrsParser__(el.getAttribute("data-context-attrs")));
    },
    stack: function(el,non,projection){
        return _.extend(projection,__attrsParser__(el.getAttribute("data-context-attrs")));
    },
    widget: function(el,non,projection){
        return _.extend(projection,__attrsParser__(el.getAttribute("data-context-attrs")));
    }
};

function __getViewNameByType__(viewType,viewName,_contextName,pack,recursive){
    if (!viewName) viewName = _contextName;
    pack = pack || __basePackage__;
    _contextName = _contextName || "";
    pack = pack || __basePackage__;
    try{
        var View = null;
        if (!View && !recursive) View = m.packages[pack].views[viewType][viewName];
        if (!View && (viewType == "model" || viewType == "collection") && _contextName){
            var contextName = _contextName.replace(/:/g,".").split("."), _viewName = viewName;
            for(var i in contextName) _viewName = _viewName.replace(RegExp("_"+contextName[i]+"$"),"");
            if (_viewName != viewName){
                return __getViewNameByType__(viewType,_viewName,_contextName,pack,true);
            }
        }
        if (!View && (viewType == "model" || viewType == "collection") && _contextName){
            var contextName = _contextName.replace(/:/g,".").split(".").reverse().join("_");
            while(!m.packages[pack].views[viewType][viewName+"_"+contextName] && contextName.length != 0){
                var prevName = contextName;
                contextName = contextName.replace(/^[a-zA-Z0-9]+_/,"");
                if (prevName == contextName) contextName = "";
            }
            View = m.packages[pack].views[viewType][viewName+(contextName?"_":"")+contextName];
        }
        if (!View && recursive) View = m.packages[pack].views[viewType][viewName];
        if (!View) throw Error("not exists");
        return View;
    }
    catch(e){
        if (_contextName.indexOf(":") == -1) throw Error("Wrong view name:"+viewName+"_"+viewType+":"+_contextName+":"+ e.message);
        else return __getViewNameByType__(viewType,viewName,_contextName.substr(_contextName.indexOf(":")+1),pack,true);
    }
};

function __checkPresenceInDom__(el){
    while (el.parentElement) {
        if (el.parentElement == document.body) return true;
        else el = el.parentElement;
    }
    return false;
}

function __getParentMuonView__(el){
    do {
        if (el.muonView instanceof m.View) return el;
        else el = el.parentElement;
    }
    while (el.parentElement);
    return null;
}


//__onReady__.push(function(){
//    var obs = window.MutationObserver || window.WebKitMutationObserver;
//    if (!obs) return;
//    function __changeProc__(record){
//        for(var i = 0, len = record.length; i < len; i++){
//            var rec = record[i];
//            console.log(rec);
//        }
//    }
//    new obs(__changeProc__).observe(document.body,{subtree:true,attributes:true,attributeFilter:[
//        "data-model-view",
//        "data-collection-view",
//        "data-layout-view",
//        "data-stack-view",
//        "data-widget-view",
//        "data-model-attr",
//        "data-model-set",
//        "data-model-get",
//        "data-attr-type",
//        "data-context",
//        "data-context-attrs",
//        "data-view-attrs",
//        "data-projection"
//    ]});
//
//    new obs(__changeProc__).observe(document.body,{subtree:true,childList:true});
//});


function __insertView__(el,viewType,pack,parentView){
    var _this = this;
    if (_this.__removed__) return;
    if (!(m.packages[pack] && m.packages[pack].inited)){
        m.requirePack(pack,function(){
            __insertView__.apply(_this,[el,viewType,pack,parentView]);
        });
        return;
    }
    var projection = el.getAttribute("data-projection");
    var viewName = el.getAttribute("data-"+viewType+"-view");
    if (viewName == "data-"+viewType+"-view") viewName = "";
    if (projection){
        var mPlugin = m.getProjection(projection)?m:parentView.m;
        $(mPlugin).one("projection_updated."+projection, function(){
            __insertView__.apply(_this,[el,viewType,pack,parentView]);
        });
        $(mPlugin).one("projection_removed."+projection,function(){
            if (el.muonView instanceof m.View) el.muonView.remove();
            $(mPlugin).one("projection_updated."+projection, function(){
                __insertView__.apply(_this,[el,viewType,pack,parentView]);
            });
        });
        projection = mPlugin.getProjection(projection);
        if (projection === undefined) return;
    }
    setTimeout(function(){
        if (el.muonView instanceof m.View){
            el.muonView.remove();
            delete el.muonView;
        }
        try{
            $.when(__procProjection__[viewType].call(_this,el,el.getAttribute("data-context"),projection)).
                then(function(context){
                    try {
                        context = context || {};
                        var View = __getViewNameByType__(viewType,viewName,context.modelName,pack);
                        var viewAttrs = __attrsParser__(el.getAttribute("data-view-attrs"));
                        viewAttrs.__autoGenerated__ = true;
                        viewAttrs.package = pack;
                        viewAttrs.plugin = _this.plugin;
                        _this.__inlineViews__.push(new (View.extend(viewAttrs))(context,el));
                    }
                    catch(e){
                        console.log(parentView.template,el);
                        console.debug(e.stack);
                    }
                });
        }
        catch(e){
            console.log(parentView.template,el);
            console.debug(e.stack);
        }
    },0);

    this.innerHTML = "";
}

function __getTranslation__(el){
    var translation = this.pack().translation[this.template+"_"+this.viewType+":"+el.getAttribute("data-tr")];
    if (m.isDebug() && !translation) {$(el).addClass("untranslated");}
    else {$(el).removeClass("untranslated");}
    return translation || (m.isDebug()?"untranslated":"");
}

__b__.View.extend = function(obj,common){
    var viewType = (_.isString(obj.viewType))?obj.viewType:this.prototype.viewType;
    obj.package = obj.package || __currentPackage__ || this.prototype.package || __basePackage__;
    obj.plugin = obj.plugin || __currentPlugin__  || this.prototype.plugin || "";
    obj.m = __registerPlugin__(obj.plugin);
    var newView = __viewBackboneExtend__.apply(this,arguments);
    if (obj.__autoGenerated__) return newView;
    var template = newView.prototype.template;
    if (typeof template == "string"){
        if (!_.isObject(m.packages[__currentPackage__].views[viewType]))
            m.packages[__currentPackage__].views[viewType] = {};
        m.packages[__currentPackage__].views[viewType][template] = newView;
    }
    else {
        if (!_.isArray(m.packages[__currentPackage__].viewsUnnamed[viewType]))
            m.packages[__currentPackage__].viewsUnnamed[viewType] = [];
        m.packages[__currentPackage__].viewsUnnamed[viewType].push(newView);
    }
    newView.prototype.super = this.prototype.constructor.prototype;
    newView.profiles = [];
    if (viewType && !m.baseViews[viewType]) m.baseViews[viewType] = newView;
    return newView;
};

function __render__(){
    var _this = this;
    var tagName = this.tagName || "div";
    var $el = $("<"+tagName+" />");
    this.__renderTemplate__($el[0]);
    if (this.el && this.el.muonView == this){
        this.el.innerHTML = "";
        $(this.el).append($el.children());
    }
    else{
        this.el = $el[0];
    }
    this.$el = $(this.el);
    this.$ = _.bind(this.$el.find,this.$el);
    this.beforeRender && this.beforeRender();
    this.undelegateEvents();
    this.delegateEvents();
    this.$el.addClass([this.className,this.viewType,"block"].join(" "));
    this.el.muonView = this;
    this.el.setAttribute("data-muon",this.template?this.template+"_"+this.viewType:"");
    this.el.setAttribute("data-pack",this["package"]);
    this.el.setAttribute("data-cid",this.cid);
    __renderDependencySrc__.call(this);
    __renderDataRoutes__.call(this);
    __renderTranslation__.call(this);
    __renderDebugLabels__.call(this);
    this.__set__ && this.__set__();
    for(var i in m.baseViews){
        var $els = this.$el.find("[data-"+i+"-view]");
        $els.each(function(){
            __insertView__.call(_this,this,i,this.getAttribute("data-pack") || _this["package"],_this);
        });
    };
    this.rendered && this.rendered();
    this.__rendered__ = true;
    setTimeout(function(){
        _this.trigger("rendered");
    })
}

function __renderDebugLabels__(){
    if (!m.isDebug() || this.debugLabel) return;
    this.debugLabel = $("<div data-debug/>").text(this.package+":"+this.viewType+":"+(this.template||""))
        .appendTo(this.el);
    this.debugLabel.click(function(){
        $(this).toggleClass("pinned");
        $(this).parent().toggleClass("pinned");
    });
    __renderTranslation__.call(this);
}

function __renderTranslation__(){
    var _this = this;
    var innerTrs =  this.$el.find("*[data-muon] *[data-tr]");
    this.$el.find("*[data-tr]").not(innerTrs).each(function(){
        try{ this.innerHTML = __getTranslation__.call(_this,this); }
        catch(e){ console.log(e); }
        if (!m.isDebug()) return;
        this.debugLabel = $("<div data-debug/>").text(_this.package+":"+_this.template+"_"+_this.viewType+":"+this.getAttribute("data-tr"))
            .appendTo(this);
    });
}

function __renderDataRoutes__(){
    var _this = this;
    this.$el.find("a[data-route]").each(function(){
        var route = this.getAttribute("data-route");
        var packName = this.getAttribute("data-pack") || _this.package;
        if (!(packName in m.packages)) return;
        if (m.packages[packName].routerPath){
            if (route.match(/^\/\//)) route = route.replace(/\/{2,}/g,"/");
            else if (route.match(/^\//))
                route = (m.packages[packName].routerPath+"/"+route).replace(/\/{2,}/g,"/");
            else route = "~"+route.replace(/\/{2,}/g,"/");
            route = (__staticApp__?"#":"")+route.replace(/\^|\$/g,"");
        }
        $(this).attr("href",route).data("pack",packName);
    });
}

function __renderDependencySrc__(){
    var _this = this;
    var innerSrc =  this.$el.find("*[data-muon] *[data-src]");
    this.$el.find("*[data-src]").not(innerSrc).each(function(){
        this.src = "/pack-src/"+_this.package+"/"+this.getAttribute("data-src")+"?muon";
    });
    if (__staticApp__)
        ["src","href"].map(function(a){
            $("["+a+"]",_this.el).each(function(){
                if (!/^\/\//.test($(this).attr(a))) $(this).attr(a,$(this).attr(a).replace(/^\//,""));
            });
        });
}

function __removeInnerViews__(){
    this.$("[data-muon]").each(function(){
        if (this.muonView instanceof m.View) this.muonView.remove();
    });
    while(this.__inlineViews__.length > 0){
        var a = this.__inlineViews__.shift();
        a.remove();
    }
}

m.View = __b__.View.extend({
    one: __b__.View.prototype.once,
    tagName: "div",
    toString: function(){
        return this.package+":"+this.viewType+":"+this.template+"["+this.cid+"]";
    },
    initialize:function(context,_el_){
        __views__[this.cid] = this;
        this.context = context || {};
        this.__inlineViews__ = [];
        if (_el_ && _el_.nodeName) {
            this.__forcedElement__ = true;
            this.el = _el_;
            this.el.muonView = this;
        }
        if (typeof this.init == "function") this.init.apply(this,arguments);
        __render__.call(this);
    },
    __renderTemplate__: function(el){
        if (this.template){
            var template = __templateForView__(this);
            if (!template) return;
            $(el).jqoteapp(template.innerHTML,this.context);
        }
    },
    render: undefined,
    remove: function(){
        if (this.__removed__) return;
        this.beforeRemove && this.beforeRemove();
        delete __views__[this.cid];
        __removeInnerViews__.call(this);
        if (this.__forcedElement__){
            this.undelegateEvents();
            this.$el.children().remove();
            this.$el.removeAttr("data-muon");
        }
        else this.$el.remove();
        delete this.el.muonView;
        this.stopListening();
        delete this.$el;
        delete this.el;
        this.__removed__ = true;
        this.removed && this.removed();
        this.trigger("removed");
    },
    reload: function(){
        if (this.__reload_flag__) return;
        this.__reload_flag__ = true;
        var _this = this;
        _.defer(function(){
            _this.__reload_flag__ = false;
            _this.__unset__ && _this.__unset__();
            _this.beforeReload && _this.beforeReload();
            __removeInnerViews__.call(_this);
            __render__.call(_this);
            this.reloaded && this.reloaded();
            _this.trigger("reloaded");

        })

    },
    pack: function(){return m.packages[this.package];},
    surrogate: function(){return m.packages[this.package].packageObject.surrogate;},
    trigger: function(){
        if (this.__removed__) return;
        this.$el.trigger.apply(this.$el,arguments);
        __b__.View.prototype.trigger.apply(this,arguments);
    }
});