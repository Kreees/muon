__b__.Model.extend = function _modelExtend(obj,common){
    var modelName = "";
    if (typeof obj.modelName == 'string'){
        modelName = ((this.prototype.modelName?this.prototype.modelName+".":"")+obj.modelName).replace(/\.+/,".");
    }
    else modelName = this.prototype.modelName;
    if (obj.urlRoot && obj.urlRoot.indexOf("0.0.0.0") != -1){
        obj.urlRoot = obj.urlRoot.replace(/0\.0\.0\.0(:\d+)?/, (__domain__ && !__domain__.match("0.0.0.0"))?__domain__:location.host);
        if (__protocol__) obj.urlRoot = obj.urlRoot.replace(/^http:\/\//, __protocol__+"://");
    }
    var newModel = __modelBackboneExtend__.apply(this,arguments);
    newModel.modelName = modelName;
    if (obj.__autoGenerated__) return newModel;
    if (_.isString(modelName)) {
        var attrId = newModel.prototype.idAttribute;
        var _objs = {};
        function child(attrs,opts){
            attrs = attrs || {};
            if (typeof attrs === "string" || typeof attrs === "number"){
                var _id = attrs;
                if (!(_id in _objs)){
                    attrs = {}; attrs[attrId] = _id;
                    var obj = new newModel(attrs,opts);
                    _objs[_id] = obj;
                }
                else {
                    var obj = _objs[_id];
                }
                if (opts && opts.forceSync) obj.fetch();
                return _objs[_id];
            }
            if (typeof attrs._id === "string" || typeof attrs._id === "number"){
                if (attrs._id in _objs) _objs[attrs._id].set(attrs);
                else _objs[attrs._id] = new newModel(attrs,opts);
                return _objs[attrs._id];
            }
            return new newModel(attrs,opts);
        };
        child.prototype = newModel.prototype;
        child.prototype.constructor = child;
        _.extend(child,newModel);

        child.__objects__ = _objs;
        child.modelName = modelName;
        m.models[modelName] = child;
        var pluginName = modelName.substr(0,modelName.lastIndexOf(":"));
        var pluginObject = __registerPlugin__(pluginName);
        child.prototype.m = pluginObject;
        pluginObject = __plugins__[""];
        var pluginStack = pluginName.split(":");
        for(var i in pluginStack){
            var shorterName = modelName.substr(modelName.indexOf(":")+1);
            if (pluginStack[i] != "") pluginObject = pluginObject.plugins[pluginStack[i]];
            pluginObject.models[shorterName] = child;
            pluginObject["model_"+shorterName.replace(/[:\.]/g,"_")] = child;
        }
        return child;
    }
    return newModel;

};

m.Model = __b__.Model.extend({
        one: __b__.Model.prototype.once,
        idAttribute: "_id",
        initialize: function(data){
            var _this = this;
            this.__syncName__ = "mod_"+Math.floor(Math.random()*10000);
            this.on("change:"+this.idAttribute,function(){
                if (_this.constructor.__objects__){
                    delete _this.constructor.__objects__[_this.previousAttributes[_this.idAttribute]];
                    _this.constructor.__objects__[_this.id] = _this;
                }
            });
            if (typeof this.init == "function") this.init(data);
        },
        fetch: function(args){
            var dfd = $.Deferred();
            var _this = this;
            __b__.Model.prototype.fetch.call(this,{
                success: function(){
                    if (args) if ('function' === typeof args.success) args.success.apply(_this,arguments);
                    dfd.resolve(_this);
                },
                error: function(){
                    if (args) if ('function' === typeof args.error) args.error.apply(_this,arguments);
                    dfd.reject(arguments);
                }
            });
            return dfd.promise();
        },
        get: function(t){
            var obj = {value: this.attributes[t]};
            try{ obj = JSON.parse(JSON.stringify(obj)); }
            catch(e) {return this.attributes[t];}
            return obj.value;
        },
        save: function(obj,args){
            var dfd = $.Deferred();
            var _this = this;
            __b__.Model.prototype.save.call(this,obj,{
                success: function(){
                    if (args) if ('function' === typeof args.success) args.success.apply(_this,arguments);
                    dfd.resolve(_this);
                },
                error: function(){
                    if (args) if ('function' === typeof args.error) args.error.apply(_this,arguments);
                    dfd.reject(arguments);
                }
            });
            return dfd.promise();
        },
        action: function(action,argsObj,opts){
            var _this = this;
            argsObj = argsObj || {};
            argsObj.__action__ = action;
            opts = opts || {};
            var s = opts.success,
                e = opts.error;
            opts.success = function(){s && s.apply(_this,arguments);};
            opts.error = function(){e && e.apply(_this,arguments);};
            opts.data = argsObj;
            return $.ajax((typeof this.url == "function")?this.url():this.url,opts);
        },
        destroy: function(args){
            var dfd = $.Deferred();
            var _this = this;
            __b__.Model.prototype.destroy.call(this,{
                success: function(){
                    if (args) if ('function' === typeof args.success) args.success.apply(_this,arguments);
                    delete _this.constructor.__objects__[_this.id];
                    dfd.resolve(_this);
                },
                error: function(){
                    if (args) if ('error' === typeof args.error) args.error.apply(_this,arguments);
                    dfd.reject(arguments);
                }
            });
            return dfd.promise();
        }
    },
    {
        collection: function(objSearchParams){
            objSearchParams = __serializeObject__(objSearchParams || {});
            if (objSearchParams) objSearchParams = "?__action__=search&"+objSearchParams;
            return new m.Collection([],{
                url: this.prototype.urlRoot+objSearchParams,
                model: this
            });
        }
    }
);